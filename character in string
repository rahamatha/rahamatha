#include <stdio.h>
#include <stdbool.h>
#define MAX_SIZE 100
typedef struct
{
    char arr[MAX_SIZE];
    int top;
} Stack;
void init(Stack *s)
{
    s->top = -1;
}
bool isEmpty(Stack *s)
{
    return s->top == -1;
}
void push(Stack *s, char c) 
{
    if (s->top == MAX_SIZE - 1)
    {
        printf("Stack overflow!\n");
        return;
    }
    s->arr[++(s->top)] = c;
}
char pop(Stack *s) {
    if (isEmpty(s)) {
        printf("Stack underflow!\n");
        return '\0';
    }
    return s->arr[(s->top)--];
}
bool isValid(char* s) {
    Stack stack;
    init(&stack);
    char c;
    for (int i = 0; s[i] != '\0'; i++) {
        switch (s[i]) {
            case '(':
            case '{':
            case '[':
                push(&stack, s[i]);
                break;
            case ')':
                if (isEmpty(&stack) || pop(&stack) != '(')
                    return false;
                break;
            case '}':
                if (isEmpty(&stack) || pop(&stack) != '{')
                    return false;
                break;
            case ']':
                if (isEmpty(&stack) || pop(&stack) != '[')
                    return false;
                break;
            default:
                break;
        }
    }
    return isEmpty(&stack);
}
int main() 
{
    char s1[] = "()";
    char s2[] = "()[]{}";
    char s3[] = "(]";
    char s4[] = "([)]";
    char s5[] = "{[]}";
    printf("Output for s1: %s\n", isValid(s1) ? "true" : "false");  // Output: true
    printf("Output for s2: %s\n", isValid(s2) ? "true" : "false");  // Output: true
    printf("Output for s3: %s\n", isValid(s3) ? "true" : "false");  // Output: false
    printf("Output for s4: %s\n", isValid(s4) ? "true" : "false");  // Output: false
    printf("Output for s5: %s\n", isValid(s5) ? "true" : "false");  // Output: true
    return 0;
}
